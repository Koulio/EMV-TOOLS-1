language: c
sudo: false
compiler:
  - gcc
  - clang
addons:
  apt:
    packages:
      - libconfig-dev
      - libpcsclite-dev
      - libgcrypt11-dev
      - nettle-dev

# This project also uses Coverity Scan https://scan.coverity.com/
# However, the Travis coverity scan addon (as of 19.02.2014) does not fit our needs,
# because then all builds are done as covertiy scans and results send to the server.
# Therefore we reused the old method
# (setting environment variables, download and execute a script).

# Thanks for the bareos for the idea on how to use Coverity Scan.

env:
  matrix:
    - GCRYPT=yes NETTLE=no
    - GCRYPT=no NETTLE=yes
    - GCRYPT=yes NETTLE=yes COVERITY_SCAN=1
    - DEPLOY=1
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    # -- BEGIN Coverity Scan ENV
    # The build command with all of the arguments that you would apply to a manual `cov-build`
    # Usually this is the same as STANDARD_BUILD_COMMAND, exluding the automated test arguments
    - COVERITY_SCAN_BUILD_COMMAND="make check"
    # Name of the project
    - COVERITY_SCAN_PROJECT_NAME="lumag/emv-tools"
    # Email address for notifications related to this build
    - COVERITY_SCAN_NOTIFICATION_EMAIL="dbaryshkov@gmail.com"
    # Regular expression selects on which branches to run analysis
    # Be aware of quotas. Do not run on every branch/commit
    - COVERITY_SCAN_BRANCH_PATTERN="master"
    # COVERITY_SCAN_TOKEN via "travis encrypt" using the repo's public key
    - secure: "ZaKrdsHXIKWzdNx/zbIOD+n9uFLHv8vSl66MB9TidjNMpyVpHyXNk0ZtZ5LPmzOoW8g7QOKCNGqBv0Yv+PhvZYxQg3SzsKgco1Zd4mtPOiTKoRtHhJqTcjrWawjjlgoM4aRTxEQtbPHRn4Ci8FZIfMmmwHoi3QQPpmf8kRvk/XGALrwDo01FRCxYYmj/99KcXjvpeide2fQu8+46+4KmYMaX+ShAsm0/h6Gz9mgrGrhwyW6uLibiXv5rro8hDfGkEPS28HgAqtkprBxWGGVS7nl0sDTUFDKm0+NjjDwQZtYcRjbF/+ZO58RbKXHIV2eijaD0zU/PA5SHxjISkgdT6WsdLXxt45ol943ES5wbGSfDYhNrKr2QW7TioMvm+2otOEx+tU00nLpdaxPzoEhzPO+PfyWO9ELmzob6Lbn3j0DwBWYdSApCcUld6TMWpuhaGdY4Alg43qtPYU6MHCyEWVMW9WFMQuewAkH3Y/jmFUxQqa7NQmgWo53NmUmfEBSdeIZ7VbNlTLPCYe5bUPw0JafKc7CbOlgSQSzhpNTJH+hWpGk2+AzRyCjI2zHgYcPqcU3Mo1bZtlAYy5nae2n8FBZJ4P8cdZ4wx7uEqRBMPFGCst5UpiZnn4cdOOZywr7mWz5it5quXDGf57P6mofcssu+bo9E1BvkJXTut028qgA="
    - COVERITY_SCAN_BUILD_URL="https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh"
    - COVERITY_SCAN_BUILD="curl -s $COVERITY_SCAN_BUILD_URL | bash"
    # -- END Coverity Scan ENV

matrix:
  # covertiy scan should only run once and it might fail,
  # because the number of times its runs is limited per week.
  # We only check when compiled with gcc.
  exclude:
    - compiler: clang
      env: GCRYPT=yes NETTLE=yes COVERITY_SCAN=1
    - compiler: clang
      env: DEPLOY=1
  allow_failures:
    - env: GCRYPT=yes NETTLE=yes COVERITY_SCAN=1
    - env: DEPLOY=1

before_script:
  - autoreconf -vfi
script:
  - mkdir -p build
  - cd build
  - ../configure --enable-scard-emu --enable-scard-apduio --enable-crypto-libgcrypt=${GCRYPT} --enable-crypto-nettle=${NETTLE}
  - if [ -n "${COVERITY_SCAN}" ] ; then eval "$COVERITY_SCAN_BUILD"; elif [ -n "${DEPLOY}" ] ; then make distcheck ; else make check ; fi
before_deploy:
  - export RELEASE_PKG_FILE=$(ls *.tar.*)
  - echo "deploying $RELEASE_PKG_FILE to GitHub releases"
deploy:
  provider: releases
  api_key:
    secure: nt0vm42oMDDR5wG9QJbhDuEd+dCHE0oJlNo2XkDxkrIdPwZkggEAUlL9+OabXiGAiUyC3Fs8idz+GSUlG+51N3zruS4XwdbI21xv5EOq4JCXeX0+9Fq+2WU76rD50Rx+VxaYxlBTWVjrp6UDUX9jvia4t0XH18NKzpSJNTypctDQ0tAcKg24/4pOHCA2awNZIvNREuujFcF/DUUti+V3xv8Bv1O63BtC6xMyLe2TTcFOEP9NJcRSbaYSe8KbR/3jkRgKoMbHYmDLEAjpYmBqUKldta5YE9RPmsxe06VBtb2n+V2qysuFcPRUDbCyiVPKGxzh1t2vQr4vTv88MAqm5k9u3+UOhhVdOlh5U/dudgBxdCwxiHRelOnUHbGtDZMsnlbC4Oq3zdaBSjuzdYrDis5+N6hElu/Ul0cl2VufWetDDqgsVqfeIBmoiDYPRZ4jQ7pt8FazQXEvmS5ETkcjwNpMeLzD/W1J63VVV5TXd7Q2WAkiXW1O5vlpBloAJChHsGgwsGoLsfPTvMKgpjZuuc1/xaWs7/POJFx1W+0u7WCk9Huu/fzRWzKg3DqRM7gGnW6mUFqFtRYqt5QES9pATuyp1iUmOSAwMonthpOkrHVNZlFUMIfI0/vNSlllEnDa0bjGeulOVzzLReXtzd8spLs0nZFLU5NDQP7JHayJalE=
  file_glob: true
  file: "${RELEASE_PKG_FILE}"
  skip_cleanup: true
  on:
    tags: true
    condition: -n $DEPLOY
